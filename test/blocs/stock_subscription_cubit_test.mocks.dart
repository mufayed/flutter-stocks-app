// Mocks generated by Mockito 5.4.4 from annotations
// in ticker/test/blocs/stock_subscription_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain_layer/core/result.dart' as _i5;
import 'package:domain_layer/entities/symbol_realtime.dart' as _i6;
import 'package:domain_layer/repositories/symbols_repository.dart' as _i2;
import 'package:domain_layer/usecases/subscribe_to_symbol_use_case.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSymbolsRepository_0 extends _i1.SmartFake
    implements _i2.SymbolsRepository {
  _FakeSymbolsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SubscribeToSymbolUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscribeToSymbolUseCase extends _i1.Mock
    implements _i3.SubscribeToSymbolUseCase {
  MockSubscribeToSymbolUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SymbolsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSymbolsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.SymbolsRepository);

  @override
  _i4.Stream<_i5.Result<_i6.SymbolRealtime>> call(String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [symbol],
        ),
        returnValue: _i4.Stream<_i5.Result<_i6.SymbolRealtime>>.empty(),
      ) as _i4.Stream<_i5.Result<_i6.SymbolRealtime>>);

  @override
  void unsubscribeFromSymbol(String? symbol) => super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromSymbol,
          [symbol],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void closeConnection() => super.noSuchMethod(
        Invocation.method(
          #closeConnection,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
