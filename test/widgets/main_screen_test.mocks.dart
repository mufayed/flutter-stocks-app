// Mocks generated by Mockito 5.4.4 from annotations
// in ticker/test/widgets/main_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:domain_layer/usecases/subscribe_to_symbol_use_case.dart' as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:ticker/core/presentation/cubit/stock_subscription/stock_subscription_cubit.dart'
    as _i8;
import 'package:ticker/core/presentation/cubit/stock_subscription/stock_subscription_state.dart'
    as _i3;
import 'package:ticker/core/presentation/cubit/stock_symbol_cubit/stock_symbol_cubit.dart'
    as _i4;
import 'package:ticker/util/date_helper.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSubscribeToSymbolUseCase_0 extends _i1.SmartFake
    implements _i2.SubscribeToSymbolUseCase {
  _FakeSubscribeToSymbolUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStockSubscriptionState_1 extends _i1.SmartFake
    implements _i3.StockSubscriptionState {
  _FakeStockSubscriptionState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StockSymbolCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockSymbolCubit extends _i1.Mock implements _i4.StockSymbolCubit {
  MockStockSymbolCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.StockSymbolState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i5.dummyValue<_i4.StockSymbolState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.StockSymbolState);

  @override
  _i6.Stream<_i4.StockSymbolState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.StockSymbolState>.empty(),
      ) as _i6.Stream<_i4.StockSymbolState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> fetchStockSymbols() => (super.noSuchMethod(
        Invocation.method(
          #fetchStockSymbols,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void emit(_i4.StockSymbolState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i4.StockSymbolState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [StockSubscriptionCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockSubscriptionCubit extends _i1.Mock
    implements _i8.StockSubscriptionCubit {
  MockStockSubscriptionCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SubscribeToSymbolUseCase get subscribeToSymbolUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#subscribeToSymbolUseCase),
        returnValue: _FakeSubscribeToSymbolUseCase_0(
          this,
          Invocation.getter(#subscribeToSymbolUseCase),
        ),
      ) as _i2.SubscribeToSymbolUseCase);

  @override
  _i3.StockSubscriptionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeStockSubscriptionState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.StockSubscriptionState);

  @override
  _i6.Stream<_i3.StockSubscriptionState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.StockSubscriptionState>.empty(),
      ) as _i6.Stream<_i3.StockSubscriptionState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void subscribeToSymbol({required String? symbol}) => super.noSuchMethod(
        Invocation.method(
          #subscribeToSymbol,
          [],
          {#symbol: symbol},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unsubscribeFromSymbol({required String? symbol}) => super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromSymbol,
          [],
          {#symbol: symbol},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void closeSubscription() => super.noSuchMethod(
        Invocation.method(
          #closeSubscription,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.StockSubscriptionState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i3.StockSubscriptionState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [DateHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateHelper extends _i1.Mock implements _i9.DateHelper {
  MockDateHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getTodayDate() => (super.noSuchMethod(
        Invocation.method(
          #getTodayDate,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getTodayDate,
            [],
          ),
        ),
      ) as String);
}
