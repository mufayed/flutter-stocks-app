// Mocks generated by Mockito 5.4.4 from annotations
// in data_layer/test/data_layer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:data_layer/data_sources/remote/symbols/symbols_remote_data_source.dart'
    as _i3;
import 'package:data_layer/data_sources/remote/symbols_socket/symbols_socket_data_source.dart'
    as _i6;
import 'package:data_layer/models/symbol/symbol_model.dart' as _i5;
import 'package:data_layer/models/symbol_realtime/symbol_realtime_model.dart'
    as _i7;
import 'package:domain_layer/core/result.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SymbolsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSymbolsRemoteDataSource extends _i1.Mock
    implements _i3.SymbolsRemoteDataSource {
  MockSymbolsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.SymbolModel>>> fetchStockSymbols() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchStockSymbols,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.SymbolModel>>>.value(
            _FakeResult_0<List<_i5.SymbolModel>>(
          this,
          Invocation.method(
            #fetchStockSymbols,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.SymbolModel>>>);
}

/// A class which mocks [SymbolsSocketDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSymbolsSocketDataSource extends _i1.Mock
    implements _i6.SymbolsSocketDataSource {
  MockSymbolsSocketDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Result<_i7.SymbolRealTimeModel>> subscribeToSymbol(
          String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToSymbol,
          [symbol],
        ),
        returnValue: _i4.Stream<_i2.Result<_i7.SymbolRealTimeModel>>.empty(),
      ) as _i4.Stream<_i2.Result<_i7.SymbolRealTimeModel>>);
}
